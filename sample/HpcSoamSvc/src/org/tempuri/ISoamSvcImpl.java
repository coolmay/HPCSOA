/**
 * Please modify this class to meet your needs This class is not complete
 */
package org.tempuri;

import java.io.*;
import java.net.InetAddress;

import org.apache.cxf.headers.Header;
import org.apache.cxf.helpers.CastUtils;
import org.apache.cxf.jaxws.context.WrappedMessageContext;
import org.apache.cxf.message.Message;
import org.w3c.dom.Element;
import com.microsoft.hpc.scheduler.session.DataClient;
import com.microsoft.hpc.scheduler.session.servicecontext.ServiceContext;
import com.microsoft.hpc.scheduler.session.servicecontext.TraceHelper;
import com.microsoft.hpc.scheduler.session.servicecontext.etw.*;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.annotation.Resource;
import javax.xml.namespace.QName;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.handler.MessageContext;

/**
 * This class was generated by Apache CXF 2.3.3 2011-03-11T14:28:00.191+08:00
 * Generated source version: 2.3.3
 *
 */
@javax.jws.WebService(serviceName = "SoamSvc", portName = "DefaultBinding_ISoamSvc", targetNamespace = "http://tempuri.org/", wsdlLocation = "file:tempuri.org.wsdl", endpointInterface = "org.tempuri.ISoamSvc")
public class ISoamSvcImpl implements ISoamSvc {

    @Resource
    WebServiceContext wsContext;

    private static final int BufferSize = 64000;
    private static final Logger LOG = Logger.getLogger(ISoamSvcImpl.class
            .getName());

    /*
     * (non-Javadoc)
     * 
     * @see org.tempuri.ISoamSvc#soamInvoke(byte[] soamInput )*
     */
    @Override
    public byte[] soamInvoke(byte[] soamInput) {
        ServiceContext.Logger.traceEvent(Level.INFO,
                "Executing operation soamInvoke");
        try {
            byte[] soamOutput = null;
            
            // Get soam service instance
            com.microsoft.hpc.soam.ServiceContainer service = SoamServiceLoader.getServiceInstance();

//            // Call onCreateService
//            service.onCreateService(serviceContext);

            // Call onSessionEnter
            com.microsoft.hpc.soam.SessionContext sessionContext = new com.microsoft.hpc.soam.SessionContext();
            service.onSessionEnter(sessionContext);

            // Call onInvoke
            com.microsoft.hpc.soam.TaskContext taskContext = new com.microsoft.hpc.soam.TaskContext();
            taskContext.setInput(soamInput);
            taskContext.setUserData(getUserData());
            ServiceContext.Logger.traceEvent(Level.INFO, "Before onInvoke : "+ soamInput.length);
            service.onInvoke(taskContext);
            soamOutput = taskContext.getOutput();
            ServiceContext.Logger.traceEvent(Level.INFO, "After onInvoke : " + soamOutput.length);

            // Call onSessionLeave
            service.onSessionLeave();

//            // Call onDestoryService
//            service.onDestroyService();

            // return 
            return soamOutput;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    private String getUserData() {
        if(this.wsContext == null)
            return "";
        
        MessageContext mc = this.wsContext.getMessageContext();
        Message message = ((WrappedMessageContext) mc).getWrappedMessage();
        String userData = "";
        List<Header> headers = CastUtils.cast((List<?>) message
                .get(Header.HEADER_LIST));

        for (Header h : headers) {
            QName name = h.getName();
            if (name.getLocalPart() == com.microsoft.hpc.scheduler.session.Constant.UserDataHeaderName
                    && name.getNamespaceURI() == com.microsoft.hpc.scheduler.session.Constant.HpcHeaderNS) {
                Element root = (Element) h.getObject();
                userData = root.getTextContent();
                break;
            }
        }
        return userData;
    }

}
